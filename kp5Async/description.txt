Для першого завдання:
За допомогою CompletableFuture.supplyAsync() виконується fetchDataFromDb,
функція simulateDelay() імітує обробку даних в 2 секунди,
За допомогою thenCompose() створюється друге асинхронне завдання, що починається тільки після завершення першого
CompletableFuture(),
В другому асинхронному завданні до строки, що повернув перший CompletableFuture() додається строка "This is a kaomoji: ".
Після цього thenAccept() отримує результат обробки другого CompletableFuture() і виводить його в консоль.

Для другого завдання:
Для трьох міст створюється окреме асинхронне завдання за допомогою метода fetchWeather()
Цей метод імітує затримку перед отриманням погодних даних, генерує випадкові значення для
цих даних за допомогою ThreadLocalRandom (це метод для генерації випадкових чисел що підходить для багатопотоковості)
Після того, як одне з CompletableFuture з цих трьох виконається, спрацює метод CompletableFuture.anyOf()
Після чого результат найпершого завдання виведеться в консоль.
Метод CompletableFuture.allOf() виконається тільки після того, як виконаються всі завдання.
За допомогою ThenRun, що виконує додаткову дію після завершення попереднього,
Отримаємо всі погодні дані для кожного із міст, виводимо їх в консоль та в залежності від
їх значень виводимо чи вони придатні джля походу на пляж.
//